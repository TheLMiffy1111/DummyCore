package DummyCore.Core;

import static DummyCore.Core.CoreInitialiser.mcVersion;
import static DummyCore.Core.CoreInitialiser.modid;
import static DummyCore.Core.CoreInitialiser.modname;
import static DummyCore.Core.CoreInitialiser.version;

import java.util.Arrays;

import DummyCore.Utils.CommandTransfer;
import DummyCore.Utils.DummyChunkLoader;
import DummyCore.Utils.DummyConfig;
import DummyCore.Utils.DummyDataUtils;
import DummyCore.Utils.DummyEventHandler;
import DummyCore.Utils.DummyPacketHandler;
import DummyCore.Utils.DummyPacketIMSG;
import DummyCore.Utils.DummyPacketIMSG_Tile;
import DummyCore.Utils.DummyPortalHandler;
import DummyCore.Utils.DummyTilePacketHandler;
import DummyCore.Utils.LoadingUtils;
import DummyCore.Utils.NetProxy_Server;
import DummyCore.Utils.PrimitiveUtils;
import net.minecraftforge.common.ForgeChunkManager;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.fml.common.FMLCommonHandler;
import net.minecraftforge.fml.common.Loader;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
import net.minecraftforge.fml.common.event.FMLServerStoppedEvent;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import net.minecraftforge.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import net.minecraftforge.fml.relauncher.Side;

/**
 * Internal. The mod itself. Undocumented.
 * @author Modbder
 * @version From DummyCore 1.0
 */
@Mod(modid = modid, name = modname, version = version, useMetadata = false, acceptedMinecraftVersions=mcVersion)
public class CoreInitialiser {
	public static final String modid = "dummycore";
	public static final String modname = "DummyCoreUnofficial";
	public static final String globalVersion = "2";
	public static final String modVersion = "4";
	public static final String mcVersion = "[1.12,1.13)";
	public static final String modmcVersion = "112";
	public static final String buildVersion = "5";
	public static final String buildPostfix = "";
	public static final String version = globalVersion+'.'+modVersion+'.'+modmcVersion+'.'+buildVersion+'.'+buildPostfix;

	public static CoreInitialiser instance;
	public static DummyConfig cfg = new DummyConfig();
	public static SimpleNetworkWrapper network;
	@SidedProxy(clientSide = "DummyCore.Utils.NetProxy_Client", serverSide = "DummyCore.Utils.NetProxy_Server")
	public static NetProxy_Server proxy;
	public static final DummyPacketHandler packetHandler = new DummyPacketHandler();

	public static void initMetadata(ModMetadata meta) {
		meta.autogenerated = false;
		meta.modId  = modid;
		meta.name = modname;
		meta.version = version;
		meta.credits = "Modbder";
		meta.authorList= Arrays.asList(new String[] {
				"Dummy Thinking Team",
				"Modbder",
				"TheDen2099",
				"MrDangerDen",
				"TheMysticDark",
				"TheLMiffy1111",
				"mrAppleXZ"
		});
		meta.description="Dummy Core is a required package to launch mods made by Dummy Thinking team.";
	}

	@EventHandler
	public void preInit(FMLPreInitializationEvent e) {
		initMetadata(e.getModMetadata());
		Core.registerModAbsolute(getClass(), "DummyCore", e.getModConfigurationDirectory().getAbsolutePath(), cfg, false);

		if(instance == null) instance = this;
		network = NetworkRegistry.INSTANCE.newSimpleChannel("DummyCore");
		network.registerMessage(DummyPacketHandler.class, DummyPacketIMSG.class, 0, Side.SERVER);
		network.registerMessage(DummyPacketHandler.class, DummyPacketIMSG.class, 0, Side.CLIENT);
		network.registerMessage(DummyTilePacketHandler.class, DummyPacketIMSG_Tile.class, 1, Side.SERVER);
		network.registerMessage(DummyTilePacketHandler.class, DummyPacketIMSG_Tile.class, 1, Side.CLIENT);

		ForgeChunkManager.setForcedChunkLoadingCallback(instance, new DummyChunkLoader.TicketHandler());
		MinecraftForge.EVENT_BUS.register(new DummyEventHandler());
		MinecraftForge.EVENT_BUS.register(new DummyDataUtils());
		MinecraftForge.EVENT_BUS.register(new DummyPortalHandler());

		if(Loader.isModLoaded(modid))
			LoadingUtils.knownBigASMModifiers.add("dummycore");
		if(Loader.isModLoaded("DragonAPI"))
			LoadingUtils.knownBigASMModifiers.add("DragonAPI");
		if(Loader.isModLoaded("Optifine") || Loader.isModLoaded("optifine"))
			LoadingUtils.knownBigASMModifiers.add("Optifine");
		if(Loader.isModLoaded("CoFHCore"))
			LoadingUtils.knownBigASMModifiers.add("CoFHCore");
		if(Loader.isModLoaded("easycoloredlights"))
			LoadingUtils.knownBigASMModifiers.add("Easy Colored Lights");
		if(Loader.isModLoaded("thaumicinfusion"))
			LoadingUtils.knownBigASMModifiers.add("Thaumic Infusion");
		if(PrimitiveUtils.classExists("api.player.forge.PlayerAPIPlugin"))
			LoadingUtils.knownBigASMModifiers.add("Player API");
		if(PrimitiveUtils.classExists("cofh.tweak.CoFHTweaks"))
			LoadingUtils.knownBigASMModifiers.add("CoFH Tweaks");
		if(PrimitiveUtils.classExists("codechicken.core.asm.CodeChickenCoreModContainer"))
			LoadingUtils.knownBigASMModifiers.add("CodeChickenCore");
		if(Loader.isModLoaded("endercore"))
			LoadingUtils.knownBigASMModifiers.add("EnderCore");
		if(Loader.isModLoaded("codechickenlib"))
			LoadingUtils.knownBigASMModifiers.add("CodeChickenLib");

		FMLCommonHandler.instance().registerCrashCallable(new DCCrashCallable());

		proxy.registerInfo();
	}

	@EventHandler
	public void init(FMLInitializationEvent e) {
		NetworkRegistry.INSTANCE.registerGuiHandler(instance, proxy);
		proxy.registerInit();
	}

	@EventHandler
	public void postInit(FMLPostInitializationEvent e) {
		proxy.registerPostInit();
	}

	@EventHandler
	public void onServerStop(FMLServerStoppedEvent e) {
		DummyDataUtils.stop();
	}

	@EventHandler
	public void serverStart(FMLServerStartingEvent event) {
		event.registerServerCommand(new CommandTransfer());
	}
}
